Add Tailwind Plugins
> npm install tailwindcss-animate @tailwindcss/typography

// Setup Auth using Next Auth. OAuth - Provider[github]

Using Shadcn ui :
> npx shadcn@latest init

To add a shadcn components (button) :
> npx shadcn@latest add button
// (skeleton)
> npx shadcn@latest add skeleton

Setup SANITY in Next.js 
(copy command from when created a sanity Project)
> npm create sanity@latest -- --project 9wu2xd6e --dataset production --template clean
 Login in sanity
> npm install next-sanity@canary

Added a sanity markdown plugin
> npm install sanity-plugin-markdown

To Generate sanity types :-
-> Extract using:
> npx sanity@latest schema extract --path=./sanity/extract.json
-> Generate using:
> npx sanity@latest typegen generate

In Sanity we setup the following
// creating sanity dataSchemas
// configuring sanity.config.ts .envs & structure.ts according to necessity.
// writing queries to fetch data from db.

//lib folder Sanity API's
live API
client.ts
queries.ts
write-client.ts // to create & update data



package.json add scripts:
        scripts : {
        "predev": "npm run typegen",
		"prebuild": "npm run typegen",
		"typegen": "sanity schema extract --path=./sanity/extract.json && sanity typegen generate"
        }
can simply run 
  > npm run typegen
to extract and generate sanity types

-> A package to ensure module can only be used on server components
> npm i server-only

setting up sanity - Live content API
->setup and config live.ts
-> fetch posts using live API

using experimental feature PPR in startup details Page

next.config.ts

experimental: {
		ppr: "incremental",
	},
	devIndicators: {
		appIsrStatus: true,
		buildActivity: true,
		buildActivityPosition: "bottom-right",
	},

in the page.tsx
-export const experimental_ppr = true;



//
Home Page StartUps is Fetched LIVE API. (SSR)

//
In Startup Details Page utlising Partial Pre-Rendering (PPR) :
-> All Startup Details is cached and [useCdn:true] in sanity client.ts 
   (revalidates the page every 60 seconds).
-> Hence, the Details Page all data updates are updated in Incremental Static Regeneration (ISR) Fashion.

// useActionState Hook
const [state, formAction, isPending] = useActionState(handleFormSubmit, {
		error: "",
		status: "INITIAL",
	});

set formSchema to do validation with Zod
 made a server action to handle creating new startup's

// installled and setup sentry
